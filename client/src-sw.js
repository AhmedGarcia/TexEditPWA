// const { offlineFallback, warmStrategyCache } = require('workbox-recipes');
// const { CacheFirst } = require('workbox-strategies');
// const { registerRoute } = require('workbox-routing');
// const { CacheableResponsePlugin } = require('workbox-cacheable-response');
// const { ExpirationPlugin } = require('workbox-expiration');
// const { precacheAndRoute } = require('workbox-precaching/precacheAndRoute');

// precacheAndRoute(self.__WB_MANIFEST);

// const pageCache = new CacheFirst({
//   cacheName: 'page-cache',
//   plugins: [
//     new CacheableResponsePlugin({
//       statuses: [0, 200],
//     }),
//     new ExpirationPlugin({
//       maxAgeSeconds: 30 * 24 * 60 * 60,
//     }),
//   ],
// });

// warmStrategyCache({
//   urls: ['/index.html', '/'],
//   strategy: pageCache,
// });

// registerRoute(({ request }) => request.mode === 'navigate', pageCache);

// // TODO: Implement asset caching


// registerRoute(
//   ({ request }) => request.destination === 'image', 
//   new CacheFirst({
//   cacheName: 'image-cache',
//   plugins: [
//     new CacheableResponsePlugin({
//       statuses: [0, 200],
//     }),
//     new ExpirationPlugin({
//       maxAgeSeconds: 30 * 24 * 60 * 60, // Cache images for 30 days
//       maxEntries: 60, // Limit to 60 entries
//     }),
//   ],
// }));




// Import workbox methods and plugins
// const { offlineFallback, warmStrategyCache } = require('workbox-recipes');
// const { CacheFirst, StaleWhileRevalidate } = require('workbox-strategies');
// const { registerRoute } = require('workbox-routing');
// const { CacheableResponsePlugin } = require('workbox-cacheable-response');
// const { ExpirationPlugin } = require('workbox-expiration');
// const { precacheAndRoute } = require('workbox-precaching/precacheAndRoute');

// // Precache assets generated by webpack
// precacheAndRoute(self.__WB_MANIFEST);

// // Set up a page cache for the application shell
// const pageCache = new CacheFirst({
//   cacheName: 'page-cache',
//   plugins: [
//     new CacheableResponsePlugin({
//       statuses: [0, 200], // Cache only if the response is successful or empty
//     }),
//     new ExpirationPlugin({
//       maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days
//     }),
//   ],
// });

// // Warm up the cache by preloading important routes
// warmStrategyCache({
//   urls: ['/index.html', '/'],
//   strategy: pageCache,
// });

// // Cache navigation requests (e.g., HTML pages)
// registerRoute(({ request }) => request.mode === 'navigate', pageCache);

// // Cache JS and CSS resources with a StaleWhileRevalidate strategy
// registerRoute(
//   // Cache JS and CSS files
//   ({ request }) => request.destination === 'script' || request.destination === 'style',
//   new StaleWhileRevalidate({
//     cacheName: 'static-resources',
//     plugins: [
//       new CacheableResponsePlugin({
//         statuses: [0, 200],
//       }),
//     ],
//   })
// );

// // Cache images with CacheFirst strategy and limit the cache to 60 images
// registerRoute(
//   // Cache image files
//   ({ request }) => request.destination === 'image',
//   new CacheFirst({
//     cacheName: 'image-cache',
//     plugins: [
//       new CacheableResponsePlugin({
//         statuses: [0, 200],
//       }),
//       new ExpirationPlugin({
//         maxEntries: 60, // Cache a maximum of 60 images
//         maxAgeSeconds: 30 * 24 * 60 * 60, // Cache images for 30 days
//       }),
//     ],
//   })
// );

// // Register route for caching the logo
// registerRoute(
//   ({ url }) => url.pathname.endsWith('/logo.png'), // Specify the logo path
//   new CacheFirst({
//     cacheName: 'logo-cache',
//     plugins: [
//       new CacheableResponsePlugin({
//         statuses: [0, 200], // Cache only if the response is successful or empty
//       }),
//     ],
//   })
// );

// // Implement fallback for offline mode using `offlineFallback`
// offlineFallback({
//   pageFallback: '/offline.html',  // Fallback page to serve when offline
//   imageFallback: '/assets/icons/icon_192x192.png',  // Image to show when offline
//   fontFallback: '/assets/fonts/fallback.woff2',  // Font fallback (if needed)
// });

// 

const { offlineFallback, warmStrategyCache } = require('workbox-recipes');
const { CacheFirst, StaleWhileRevalidate } = require('workbox-strategies');
const { registerRoute } = require('workbox-routing');
const { CacheableResponsePlugin } = require('workbox-cacheable-response');
const { ExpirationPlugin } = require('workbox-expiration');
const { precacheAndRoute } = require('workbox-precaching/precacheAndRoute');

// Precache assets generated by webpack
precacheAndRoute(self.__WB_MANIFEST);

// Set up a page cache for the application shell
const pageCache = new CacheFirst({
  cacheName: 'page-cache',
  plugins: [
    new CacheableResponsePlugin({
      statuses: [0, 200],
    }),
    new ExpirationPlugin({
      maxAgeSeconds: 30 * 24 * 60 * 60,
    }),
  ],
});

// Warm up the cache by preloading important routes
warmStrategyCache({
  urls: ['/index.html', '/'],
  strategy: pageCache,
});

// Cache navigation requests (e.g., HTML pages)
registerRoute(({ request }) => request.mode === 'navigate', pageCache);

// Cache JS and CSS resources with a StaleWhileRevalidate strategy
registerRoute(
  ({ request }) => request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache images with CacheFirst strategy and limit the cache to 60 images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'image-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60,
      }),
    ],
  })
);

// Register route for caching the logo
registerRoute(
  ({ url }) => url.pathname.endsWith('/logo.png'),
  new CacheFirst({
    cacheName: 'logo-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Implement fallback for offline mode using `offlineFallback`
offlineFallback({
  pageFallback: '/offline.html',
  imageFallback: '/assets/icons/icon_192x192.png',
  fontFallback: '/assets/fonts/fallback.woff2',
});


